#Assignment 1
#Q.1) 
import networkx as nx
import matplotlib.pyplot as plt
G=nx.Graph()

G.add_nodes_from([1,2,3,4,5])
G.add_edges_from([(1,5),(1,3),(1,2),(2,3),(2,4),(3,4),(4,5)])

plt.figure(figsize=(5,5))
nx.draw(G,with_labels=True)
plt.title("The Graph G with vertices and edges: ")
plt.show()

#Q.2)
import networkx as nx
import matplotlib.pyplot as plt

G1=nx.Graph()
G1.add_nodes_from(['a','b','c','d'])
G1.add_edges_from([('a','d'),('b','c'),('b','d'),('a','c')])

plt.figure(figsize=(5,5))
nx.draw(G1,with_labels=True)
edge_labels={('a','d'):'x',('b','c'):'y',('b','d'):'z',('a','c'):'w'}
plt.title("The Graph G1 with labeled vertices and edges:")
nx.draw_networkx_edge_labels(G1,pos=nx.spring_layout(G1),edge_labels=edge_labels)
plt.show()

import matplotlib.pyplot as plt
import networkx as nx

# Define the graphs
G3 = nx.Graph()
G3.add_nodes_from(['a', 'b', 'c', 'd'])
G3.add_edges_from([('a', 'd'), ('b', 'c'), ('b', 'd'), ('a', 'c')])

G4 = nx.Graph()
G4.add_nodes_from([1, 2, 3, 4, 5])
G4.add_edges_from([(4, 5), (5, 3), (2, 2), (2, 3), (2, 4), (3, 4), (1, 5)])  

def graph_properties(G):
    num_vertices = G.number_of_nodes()
    num_edges = G.number_of_edges()
    degrees = dict(G.degree())
    return num_vertices, num_edges, degrees

num_vertices_G3, num_edges_G3, degrees_G3 = graph_properties(G3)
num_vertices_G4, num_edges_G4, degrees_G4 = graph_properties(G4)

def verify_handshaking_lemma(G, num_edges, degrees):
    sum_degrees = sum(degrees.values())
    twice_edges = 2 * num_edges
    print(f"Sum of degrees: {sum_degrees}")
    print(f"Twice the number of edges: {twice_edges}")

    if sum_degrees == twice_edges:
        print("Handshaking lemma holds!")
    else:
        print("Handshaking lemma does not hold!")

verify_handshaking_lemma(G3, num_edges_G3, degrees_G3)
verify_handshaking_lemma(G4, num_edges_G4, degrees_G4)

#Assignment 2

#Q.1)
import networkx as nx
import matplotlib.pyplot as plt
G = nx.cycle_graph(4)
pos=nx.circular_layout(G)
nx.draw(G,pos,with_labels=True)
plt.title("Regular Graph on 4 vertices with Degree 2")
plt.show()

#Q.2)
import networkx as nx
import matplotlib.pyplot as plt
G = nx.complete_graph(5)
pos=nx.spring_layout(G)
nx.draw(G,pos,with_labels=True)
plt.title("Complete_Graph K_5")
plt.show()

#Q.3) 
import matplotlib.pyplot as plt
import networkx as nx

def draw_star_graph(n) :
    G = nx.star_graph(n-1)
    pos = nx.spring_layout(G)
    nx.draw(G,pos,with_labels=True)
    plt.title(f"Star Graph S_{n}")
    plt.show()
draw_star_graph(4)
draw_star_graph(7)
draw_star_graph(8)

#Assignment 3

#Q.1)
import networkx as nx
import matplotlib.pyplot as plt

def draw_null_graph(num_vertices) :
    G = nx.empty_graph(num_vertices) 
    nx.draw(G,with_labels=True)
    plt.title(f"Null Graph with {num_vertices} vertices")
    plt.show()
draw_null_graph(7)
draw_null_graph(17)
draw_null_graph(12)

#Q.2)
import networkx as nx
import matplotlib.pyplot as plt

def draw_complete_graph(num_vertices) :
    G = nx.complete_graph(num_vertices)
    nx.draw(G,with_labels=True,node_color='lightblue',edge_color='red')
    plt.title(f"Complete Graph k{num_vertices}")
    plt.show()
draw_complete_graph(5)
draw_complete_graph(30)
draw_complete_graph(45)

#Q.3)
import networkx as nx
import matplotlib.pyplot as plt
def draw_cycle_graph(num_vertices) :
    G = nx.cycle_graph(num_vertices)
    nx.draw(G,with_labels=True)
    plt.title(f"Cycle Graph with {num_vertices}")
    plt.show()
draw_cycle_graph(8)
draw_cycle_graph(12)
draw_cycle_graph(20)
draw_cycle_graph(35)


#Assignment 4

#Q.1)
import networkx as nx 
import matplotlib.pyplot as plt
def draw_symmetric_directed_graphic(num_vertices) :
    G = nx.Digraph()
    G.add_nodes_from(range(1,num_vertices + 1))
    for j in range(1,num_vertices + 1) :
        for i in range(1,num_vertices +1) :
            G.add_edge(i,j)
    plt.figure(figsize=(8,6))
    nx.draw(G,with_labels=True,arrowsize=20)
    plt.title(f"Symmetric Directed Graph with {num_vertices}vertices")
    plt.show()
draw_symmetric_directed_graph(5)

#Q.2)
import networkx as nx
import matplotlib.pyplot as plt
def draw_symmetric_directed_graph(num_vertices) :
    G = nx.DiGraph()
    G.add_nodes_from(range(1,num_vertices + 1))
    edges=[(1,2),(1,3),(2,4),(3,4),(4,1),(2,5),(3,5),(5,1)]
    G.add_edges_from(edges)
    plt.figure(figsize=(8,6))
    nx.draw(G, with_labels=True,arrowsize=20)
    plt.title(f"Symmetric Directed Graph with {num_vertices} vertices")
    plt.show()
draw_symmetric_directed_graph(5)

#Q.3)
import networkx as nx
import matplotlib.pyplot as plt
def draw_complete_symmetric_directed_graph(num_vertices) :
    G = nx.DiGraph()
    G.add_nodes_from(range(1,num_vertices + 1))
    for i in range(1,num_vertices + 1) :
        for j in range(1,num_vertices + 1):
            if i !=j :
                G.add_edge(i,j)
                G.add_edge(j,i)
    plt.figure(figsize=(8,6))
    nx.draw(G,with_labels=True,arrowsize=20)
    plt.title(f"Complete Symmetric Directed Graph with {num_vertices} vertices")
    plt.show()
draw_complete_symmetric_directed_graph(4)

#Assignment 5

#Q.1)
import networkx as nx
import matplotlib.pyplot as plt
G = nx.Graph()
G.add_node('A',color='red')
G.add_node('B',color='blue')
G.add_node('C',color='green')
G.add_node('D',color='yellow')
G.add_edges_from([('A','B'),('A','C'),('B','D'),('C','D')])
node_colors=[G.nodes[node]['color']for node in G.nodes()]
pos=nx.spring_layout(G)
nx.draw(G,pos,with_labels=True,node_color=node_colors,edge_color='black')
plt.title("Simple Graph G")
plt.show()

#Q.2)
import matplotlib.pyplot as plt
import networkx as nx
G = nx.Graph()
G.add_node('A',color='red')
G.add_node('B',color='blue')
G.add_node('C',color='green')
G.add_node('D',color='yellow')
G.add_edges_from([('A','B'),('A','C'),('B','D'),('C','D')])
G_complement=nx.complement(G)
node_colors=[G.nodes[node]['color']for node in G.nodes()]
plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
pos=nx.spring_layout(G)
nx.draw(G,pos,with_labels=True)
plt.title("Original Graph G")
complement_node_colors=['lightgray']*len(G_complement.nodes())
plt.subplot(1,2,2)
pos_complement=nx.spring_layout(G_complement)
nx.draw(G_complement,pos_complement,with_labels=True)
plt.title("Complement Graph G")
plt.show()

#Q.3)
import matplotlib.pyplot as plt
import networkx as nx
G = nx.Graph()
G.add_node('A',color='red')
G.add_node('B',color='blue')
G.add_node('C',color='green')
G.add_node('D',color='yellow')
G.add_edges_from([('A','B'),('A','C'),('B','D'),('C','D')])
num_components = nx.number_connected_components(G)
print(f"The number of connected components in the graph G is:{num_components}")
plt.figure(figsize=(6,6))
pos=nx.spring_layout(G)
nx.draw(G,pos,with_labels=True)
plt.title("Graph G")
plt.show()

#Assignment 6

